type: edu
custom_name: stage3
files:
- name: src/blockchain/Hex.java
  visible: true
  text: |
    package blockchain;

    public class Hex {
        private final byte[] bytes;

        public Hex(byte[] bytes) {
            this.bytes = bytes;
        }

        @Override
        public String toString() {
            StringBuilder hexString = new StringBuilder();
            for (byte elem : bytes) {
                hexString.append(byteToHex(elem));
            }
            return hexString.toString();
        }

        private static String byteToHex(byte bits) {
            String hex = Integer.toHexString(0xff & bits);
            return hex.length() < 2 ? "0" + hex : hex;
        }
    }
  learner_created: false
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            System.out.print("Enter how many zeros the hash must start with: ");
            int security = scanner.nextInt();

            BlockChain blockChain = new BlockChain(security);
            for (int i = 0; i < 5; i++) {
                blockChain.createBlock();
            }
        }
    }
  learner_created: false
- name: src/blockchain/Sha256.java
  visible: true
  text: |
    package blockchain;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;

    public class Sha256 {
        private final String string;

        public Sha256(String string) {
            this.string = string;
        }

        @Override
        public String toString() {
            return new Hex(
                    digest(string.getBytes(StandardCharsets.UTF_8))
            ).toString();
        }

        private static byte[] digest(byte[] bytes) {
            return sha256().digest(bytes);
        }
        private static MessageDigest sha256() {
            try {
                return MessageDigest.getInstance("SHA-256");
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: false
- name: src/blockchain/BlockChain.java
  visible: true
  text: |
    package blockchain;

    import java.util.*;
    import java.util.function.Consumer;
    import java.util.function.Supplier;

    public class BlockChain {
        private final List<Block> blocks = new ArrayList<>();
        private final int security;
        private final Supplier<Long> magicNumberSupplier;
        private final Consumer<String> logger;

        /**
         * @param security            the number of zeroes in the beginning of hash of
         *                            each block required to create a block.
         * @param magicNumberSupplier generator of magic number
         */
        public BlockChain(int security, Supplier<Long> magicNumberSupplier, Consumer<String> logger) {
            this.security = security;
            this.magicNumberSupplier = magicNumberSupplier;
            this.logger = logger;
        }

        public BlockChain(int security) {
            this(security, (new Random())::nextLong, System.out::println);
        }

        public void createBlock() {
            long id = id();
            long startTime = System.currentTimeMillis();
            Block block = insecureBlock(id, magicNumberSupplier.get());
            while (!block.hash().startsWith(secureHashBeginning())) {
                block = insecureBlock(id, magicNumberSupplier.get());
            }
            long endTime = System.currentTimeMillis();
            logBlock(block, startTime, endTime);
            blocks.add(block);
        }

        public boolean isValid() {
            Iterator<Block> iterator = blocks.iterator();
            Block previousBlock = iterator.next();
            while (iterator.hasNext()) {
                Block currentBlock = iterator.next();
                if (!previousBlock.isPreviousOf(currentBlock)) {
                    return false;
                }
                previousBlock = currentBlock;
            }
            return true;
        }

        @Override
        public String toString() {
            StringJoiner joiner = new StringJoiner("\n");
            blocks.forEach(block -> joiner.add(block.toString()));
            return joiner.toString();
        }

        private Block insecureBlock(long id, long magicNumber) {
            return new Block(id, now(), lastBlockHash(), magicNumber);
        }

        private void logBlock(Block block, long startTime, long endTime) {
            String message = String.format(
                    "%s\nBlock was generating for %s seconds\n",
                    block, (endTime - startTime) / 1000
            );
            logger.accept(message);
        }

        private String secureHashBeginning() {
            return "0".repeat(security);
        }

        private String lastBlockHash() {
            if (blocks.size() > 0) {
                return blocks.get(blocks.size() - 1).hash();
            } else {
                return "0";
            }
        }

        private static long now() {
            return new Date().getTime();
        }

        private static long id() {
            return BlockChain.id++;
        }

        private static long id = 1;
    }
  learner_created: false
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    public class Block {
        private final long id;
        private final long timestamp;
        private final String previousBlockHash;
        private final long magicNumber;

        public Block(
                long id, long timestamp,
                String previousBlockHash,
                long magicNumber
        ) {
            this.id = id;
            this.timestamp = timestamp;
            this.previousBlockHash = previousBlockHash;
            this.magicNumber = magicNumber;
        }

        public boolean isPreviousOf(Block other) {
            return other.previousBlockHash.equals(hash());
        }

        public String hash() {
            return new Sha256(hashSource()).toString();
        }

        private String hashSource() {
            return String.format(
                    "%s.%s.%s.%s",
                    id, timestamp, previousBlockHash, magicNumber
            );
        }

        @Override
        public String toString() {
            return String.format(
                    "Block:\nId: %d\nTimestamp: %d\n" +
                            "Magic number: %d\n" +
                            "Hash of the previous block: \n%s\n" +
                            "Hash of the block: \n%s",
                    id, timestamp, magicNumber, previousBlockHash, hash()
            );
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() != 11) {
                throw new BlockParseException("Every block should " +
                    "contain 11 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Miner.java
  visible: true
  learner_created: true
- name: src/blockchain/BlockFactory.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/273/implement
status: Solved
record: 2
