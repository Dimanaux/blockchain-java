type: edu
custom_name: stage6
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    import java.util.Random;
    import java.util.concurrent.ExecutorService;
    import java.util.concurrent.Executors;
    import java.util.concurrent.TimeUnit;

    public class Main {
        public static void main(String[] args) throws InterruptedException {
            BlockChain blockChain = new BlockChain();
            BlockFactory blockFactory = new BlockFactory(
                    (new Random())::nextLong,
                    System.out::println,
                    blockChain
            );
            ExecutorService executorService = Executors.newFixedThreadPool(4);
            for (int i = 0; i < 4; i++) {
                executorService.submit(new Miner(i, blockFactory));
            }
            executorService.shutdown();
            executorService.awaitTermination(10, TimeUnit.SECONDS);
        }
    }
  learner_created: false
- name: src/blockchain/BlockChain.java
  visible: true
  text: |
    package blockchain;

    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.StringJoiner;
    import java.util.concurrent.atomic.AtomicInteger;

    public class BlockChain {
        private final ArrayList<Block> blocks = new ArrayList<>();
        private final Object lock = new Object();
        private final AtomicInteger security = new AtomicInteger(0);

        public boolean add(Block block) {
            synchronized (lock) {
                if (isValid(block)) {
                    adjustSecurity(block.getTimestamp());
                    return blocks.add(block);
                } else {
                    return false;
                }
            }
        }

        public int blocksCount() {
            return blocks.size();
        }

        public int security() {
            return security.get();
        }

        private void adjustSecurity(long timestamp) {
            if (blocks.isEmpty()) {
                security.incrementAndGet();
                return;
            }
            long lastBlockCreationTime = timestamp - blocks.get(blocks.size() - 1).getTimestamp();
            if (lastBlockCreationTime > 60_000) {
                security.decrementAndGet();
            } else if (lastBlockCreationTime < 10_000) {
                security.incrementAndGet();
            }
        }

        private boolean isValid(Block block) {
            Iterator<Block> iterator = blocks.iterator();
            if (!iterator.hasNext()) {
                return true;
            }
            Block previousBlock = iterator.next();
            while (iterator.hasNext()) {
                Block currentBlock = iterator.next();
                if (!previousBlock.isPreviousOf(currentBlock)) {
                    return false;
                }
                previousBlock = currentBlock;
            }
            return block.hash().startsWith("0".repeat(security.get()))
                    && previousBlock.isPreviousOf(block);
        }

        @Override
        public String toString() {
            StringJoiner joiner = new StringJoiner("\n");
            synchronized (lock) {
                blocks.forEach(block -> joiner.add(block.toString()));
            }
            return joiner.toString();
        }

        public String lastBlockHash() {
            synchronized (lock) {
                if (blocks.size() > 0) {
                    return blocks.get(blocks.size() - 1).hash();
                } else {
                    return "0";
                }
            }
        }
    }
  learner_created: false
- name: src/blockchain/BlockFactory.java
  visible: true
  text: |
    package blockchain;

    import java.util.function.Consumer;
    import java.util.function.Supplier;

    public class BlockFactory {
        private final Supplier<Long> magicNumberSupplier;
        private final Consumer<String> logger;
        private final BlockChain blockChain;

        public BlockFactory(Supplier<Long> magicNumberSupplier, Consumer<String> logger, BlockChain blockChain) {
            this.magicNumberSupplier = magicNumberSupplier;
            this.logger = logger;
            this.blockChain = blockChain;
        }

        public boolean createBlock(String payload) {
            long id = blockChain.blocksCount() + 1;
            long startTime = System.currentTimeMillis();
            int security = blockChain.security();
            String previousBlockHash = blockChain.lastBlockHash();

            Block block;
            do {
                if (!blockChain.lastBlockHash().equals(previousBlockHash)) {
                    return false;
                }
                block = insecureBlock(id, magicNumberSupplier.get(), previousBlockHash, payload);
            } while (!block.hash().startsWith(secureHashBeginning(security)));

            long endTime = System.currentTimeMillis();
            synchronized (this) {
                boolean added = blockChain.add(block);
                if (added) {
                    logBlock(block, startTime, endTime, blockChain.security() - security);
                    return true;
                }
                return false;
            }
        }

        public int blocksCount() {
            return blockChain.blocksCount();
        }

        private void logBlock(Block block, long startTime, long endTime, int secDiff) {
            String message = String.format(
                    "%s\nBlock was generating for %s seconds\n",
                    block, (endTime - startTime) / 1000
            );
            if (secDiff > 0) {
                message += "N was increased to " + blockChain.security() + "\n";
            } else if (secDiff == 0) {
                message += "N stays the same\n";
            } else {
                message += "N was decreased by " + secDiff + "\n";
            }
            logger.accept(message);
        }

        private Block insecureBlock(long id, long magicNumber, String previousBlockHash, String payload) {
            return new Block(id, now(), previousBlockHash, magicNumber, payload);
        }

        private String secureHashBeginning(int security) {
            return "0".repeat(security);
        }

        private static long now() {
            return System.currentTimeMillis();
        }
    }
  learner_created: false
- name: src/blockchain/Miner.java
  visible: true
  text: |
    package blockchain;

    public class Miner implements Runnable {
        private final BlockFactory blockFactory;
        private final int id;

        public Miner(int id, BlockFactory blockFactory) {
            this.blockFactory = blockFactory;
            this.id = id;
        }

        @Override
        public void run() {
            while (blockFactory.blocksCount() < 5) {
                blockFactory.createBlock(
                        "Created by miner # " + id
                );
            }
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                    "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                    "should contain \"gets 100 VC\"");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                    "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/blockchain/blocks/HardToMineBlockTest.java
  visible: true
  text: |-
    package blockchain.blocks;

    import org.junit.Test;

    import java.util.Optional;

    import static org.junit.Assert.assertFalse;
    import static org.junit.Assert.assertTrue;

    public class HardToMineBlockTest {
        SimpleBlock previous = new SimpleBlock(1L, "0", System.currentTimeMillis());
        SimpleBlock next = new SimpleBlock(2L, previous.hash(), System.currentTimeMillis());

        @Test
        public void isPreviousOf() {
            Optional<HardToMineBlock> hardToMineBlock = HardToMineBlock.create(next, 0, 23);
            assertTrue(hardToMineBlock.isPresent());
            assertTrue(hardToMineBlock.get().isNextFor(previous));
            assertFalse(previous.isNextFor(hardToMineBlock.get()));
        }
    }
  learner_created: false
- name: test/blockchain/blocks/CarrierBlockTest.java
  visible: true
  text: |
    package blockchain.blocks;

    import org.junit.Test;

    import static org.junit.Assert.assertFalse;
    import static org.junit.Assert.assertTrue;

    public class CarrierBlockTest {
        SimpleBlock previous = new SimpleBlock(1L, "0", System.currentTimeMillis());
        SimpleBlock next = new SimpleBlock(2L, previous.hash(), System.currentTimeMillis());

        @Test
        public void isPreviousOf() {
            CarrierBlock carrierBlock = new CarrierBlock(next, "Hello");
            assertTrue(carrierBlock.isNextFor(previous));
            assertFalse(previous.isNextFor(carrierBlock));
        }
    }
  learner_created: false
- name: test/blockchain/blocks/SimpleBlockTest.java
  visible: true
  text: |
    package blockchain.blocks;

    import org.junit.Test;

    import static org.junit.Assert.assertFalse;
    import static org.junit.Assert.assertTrue;

    public class SimpleBlockTest {
        SimpleBlock previous = new SimpleBlock(1L, "0", System.currentTimeMillis());
        SimpleBlock next = new SimpleBlock(2L, previous.hash(), System.currentTimeMillis());

        @Test
        public void isPreviousOf() {
            assertTrue(next.isNextFor(previous));
            assertFalse(previous.isNextFor(next));
        }
    }
  learner_created: false
- name: src/blockchain/blocks/HardToMineBlock.java
  visible: true
  text: |
    package blockchain.blocks;

    import blockchain.util.Sha256;
    import blockchain.printers.Printer;

    import java.util.Optional;
    import java.util.function.Supplier;

    public class HardToMineBlock implements PrintableBlock {
        private final PrintableBlock block;
        private final int security;
        private final long magicNumber;

        public static Optional<HardToMineBlock> create(
                PrintableBlock block,
                int security,
                long magicNumber
        ) {
            HardToMineBlock hardToMineBlock = new HardToMineBlock(
                    block, security, magicNumber
            );
            return Optional.of(hardToMineBlock)
                    .filter(HardToMineBlock::isValid);
        }

        public static HardToMineBlock mine(
                PrintableBlock block,
                int security,
                Supplier<Long> magicNumberSupplier
        ) {
            Optional<HardToMineBlock> candidate;
            do {
                candidate = create(block, security, magicNumberSupplier.get());
            } while (!candidate.isPresent());
            return candidate.get();
        }

        private HardToMineBlock(
                PrintableBlock block,
                int security,
                long magicNumber
        ) {
            this.block = block;
            this.security = security;
            this.magicNumber = magicNumber;
        }

        @Override
        public String hash() {
            return new Sha256(block.hash() + "." + magicNumber).toString();
        }

        @Override
        public boolean isNextFor(Block other) {
            return isValid() && this.block.isNextFor(other);
        }

        @Override
        public void printTo(Printer<?> printer) {
            block.printTo(printer);
            printer.put("Magic number", magicNumber);
            printer.put("Hash of the block", hash());
        }

        private boolean isValid() {
            String hash = hash();
            for (int i = 0; i < security; i++) {
                if (hash.charAt(i) != '0') {
                    return false;
                }
            }
            return true;
        }
    }
  learner_created: true
- name: src/blockchain/util/Hex.java
  visible: true
  text: |
    package blockchain.util;

    public class Hex {
        private final byte[] bytes;

        public Hex(byte[] bytes) {
            this.bytes = bytes;
        }

        @Override
        public String toString() {
            StringBuilder hexString = new StringBuilder();
            for (byte elem : bytes) {
                hexString.append(byteToHex(elem));
            }
            return hexString.toString();
        }

        private static String byteToHex(byte bits) {
            String hex = Integer.toHexString(0xff & bits);
            return hex.length() < 2 ? "0" + hex : hex;
        }
    }
  learner_created: true
- name: src/blockchain/messengers/SimpleMessenger.java
  visible: true
  text: |
    package blockchain.messengers;

    import blockchain.BlockFactory;

    public class SimpleMessenger extends Messenger {
        private final String name;

        public SimpleMessenger(BlockFactory blockFactory, String name) {
            super(blockFactory);
            this.name = name;
        }

        @Override
        public String message() {
            return name + " says: Hello! My name is " + name;
        }
    }
  learner_created: true
- name: src/blockchain/util/Sha256.java
  visible: true
  text: |
    package blockchain.util;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;
    import java.security.NoSuchAlgorithmException;

    public class Sha256 {
        private final String string;

        public Sha256(String string) {
            this.string = string;
        }

        @Override
        public String toString() {
            return new Hex(
                    digest(string.getBytes(StandardCharsets.UTF_8))
            ).toString();
        }

        private static byte[] digest(byte[] bytes) {
            return sha256().digest(bytes);
        }
        private static MessageDigest sha256() {
            try {
                return MessageDigest.getInstance("SHA-256");
            } catch (NoSuchAlgorithmException e) {
                e.printStackTrace();
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/util/Pair.java
  visible: true
  text: |
    package blockchain.util;

    import java.util.Objects;

    public class Pair<A, B> {
        public final A first;
        public final B second;

        public Pair(A first, B second) {
            this.first = first;
            this.second = second;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Pair<?, ?> pair = (Pair<?, ?>) o;
            return Objects.equals(first, pair.first) &&
                    Objects.equals(second, pair.second);
        }

        @Override
        public int hashCode() {
            return Objects.hash(first, second);
        }
    }
  learner_created: true
- name: src/blockchain/blocks/Block.java
  visible: true
  text: |
    package blockchain.blocks;

    public interface Block {
        String hash();

        boolean isNextFor(Block other);
    }
  learner_created: true
- name: src/blockchain/printers/ChosenKeysNewLinePrinter.java
  visible: true
  text: |
    package blockchain.printers;

    import java.util.List;

    import static java.util.Arrays.asList;

    public class ChosenKeysNewLinePrinter<T> implements Printer<T> {
        private static final List<String> chosenKeys = asList(
                "Hash of the previous block",
                "Hash of the block"
        );

        private final Printer<T> printer;

        public ChosenKeysNewLinePrinter(Printer<T> printer) {
            this.printer = printer;
        }

        @Override
        public void put(String attribute, Object value) {
            if (chosenKeys.contains(attribute)) {
                printer.put(attribute, "\n" + value);
            } else {
                printer.put(attribute, value);
            }
        }

        @Override
        public T flush() {
            return printer.flush();
        }
    }
  learner_created: true
- name: src/blockchain/util/ZipWithNext.java
  visible: true
  text: |
    package blockchain.util;

    import org.jetbrains.annotations.NotNull;

    import java.util.Collections;
    import java.util.Iterator;

    public class ZipWithNext<E> implements Iterable<Pair<E, E>> {
        private final Iterator<E> elements;

        public ZipWithNext(Iterable<E> collection) {
            this.elements = collection.iterator();
        }

        @NotNull
        @Override
        public Iterator<Pair<E, E>> iterator() {
            if (!elements.hasNext()) {
                return Collections.emptyIterator();
            }
            return new Iterator<>() {
                E previous = elements.next();

                @Override
                public boolean hasNext() {
                    return elements.hasNext();
                }

                @Override
                public Pair<E, E> next() {
                    E current = elements.next();
                    Pair<E, E> pair = new Pair<>(previous, current);
                    previous = current;
                    return pair;
                }
            };
        }
    }
  learner_created: true
- name: src/blockchain/messengers/Messenger.java
  visible: true
  text: |
    package blockchain.messengers;

    import blockchain.BlockFactory;

    public abstract class Messenger implements Runnable {
        private final BlockFactory blockFactory;

        public Messenger(BlockFactory blockFactory) {
            this.blockFactory = blockFactory;
        }

        @Override
        public final void run() {
            while (blockFactory.blocksCount() < 5) {
                sleep();
                blockFactory.sendMessage(message());
            }
        }

        public abstract String message();

        private static void sleep() {
            long sleepTime = (long) (Math.random() * 1000);
            try {
                Thread.sleep(sleepTime);
            } catch (InterruptedException ignored) {
            }
        }
    }
  learner_created: true
- name: src/blockchain/blocks/CarrierBlock.java
  visible: true
  text: |
    package blockchain.blocks;

    import blockchain.util.Sha256;
    import blockchain.printers.Printer;

    public class CarrierBlock implements PrintableBlock {
        private final PrintableBlock block;
        private final String message;

        public CarrierBlock(PrintableBlock block, String message) {
            this.block = block;
            this.message = message;
        }

        @Override
        public String hash() {
            return new Sha256(block.hash() + "." + message).toString();
        }

        @Override
        public boolean isNextFor(Block other) {
            return this.block.isNextFor(other);
        }

        @Override
        public void printTo(Printer<?> printer) {
            block.printTo(printer);
            printer.put("Block data", message);
            printer.put("Hash of the block", hash());
        }
    }
  learner_created: true
- name: src/blockchain/blocks/ZeroBlock.java
  visible: true
  text: |
    package blockchain.blocks;

    public class ZeroBlock implements Block {
        @Override
        public String hash() {
            return "0";
        }

        @Override
        public boolean isNextFor(Block other) {
            return false;
        }
    }
  learner_created: true
- name: src/blockchain/printers/Printable.java
  visible: true
  text: |
    package blockchain.printers;

    public interface Printable {
        void printTo(Printer<?> printer);
    }
  learner_created: true
- name: src/blockchain/blocks/SimpleBlock.java
  visible: true
  text: |
    package blockchain.blocks;

    import blockchain.printers.Printer;
    import blockchain.util.Sha256;

    public class SimpleBlock implements PrintableBlock {
        private final long id;
        private final String previousBlockHash;
        private final long timestamp;

        public SimpleBlock(long id, String previousBlockHash, long timestamp) {
            this.id = id;
            this.previousBlockHash = previousBlockHash;
            this.timestamp = timestamp;
        }

        @Override
        public void printTo(Printer<?> printer) {
            printer.put("Id", id);
            printer.put("Hash of the previous block", previousBlockHash);
            printer.put("Hash of the block", hash());
            printer.put("Timestamp", timestamp);
        }

        @Override
        public String hash() {
            return new Sha256(
                    id + "." + previousBlockHash + "." + timestamp
            ).toString();
        }

        @Override
        public boolean isNextFor(Block other) {
            return this.previousBlockHash.equals(other.hash());
        }

        public boolean isNextFor(SimpleBlock other) {
            return this.id > other.id && this.previousBlockHash.equals(other.hash());
        }
    }
  learner_created: true
- name: src/blockchain/messengers/EncryptedMessenger.java
  visible: true
  text: |
    package blockchain.messengers;

    import blockchain.BlockFactory;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.security.*;
    import java.security.spec.InvalidKeySpecException;
    import java.security.spec.PKCS8EncodedKeySpec;

    public class EncryptedMessenger extends Messenger {
        private final String name;

        public EncryptedMessenger(BlockFactory blockFactory, String name) {
            super(blockFactory);
            this.name = name;
        }

        @Override
        public String message() {
            return sign(name + " says: Hello, my name is " + name + "!");
        }

        private String sign(String data) {
            Signature rsa = null;
            try {
                rsa = Signature.getInstance("SHA1withRSA");
                rsa.initSign(privateKey());
                rsa.update(data.getBytes());
                return new String(rsa.sign());
            } catch (NoSuchAlgorithmException | InvalidKeyException | SignatureException e) {
                throw new RuntimeException(e);
            }
        }

        private PrivateKey privateKey() {
            byte[] keyBytes = new byte[0];
            try {
                keyBytes = Files.readAllBytes(new File("private.key").toPath());
            } catch (IOException ignored) {
            }
            PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
            KeyFactory kf = null;
            try {
                kf = KeyFactory.getInstance("RSA");
                return kf.generatePrivate(spec);
            } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
                throw new RuntimeException(e);
            }
        }
    }
  learner_created: true
- name: src/blockchain/blocks/PrintableBlock.java
  visible: true
  text: |
    package blockchain.blocks;

    import blockchain.printers.Printable;

    public interface PrintableBlock extends Printable, Block {
    }
  learner_created: true
- name: src/blockchain/printers/MapPrinter.java
  visible: true
  text: |
    package blockchain.printers;

    public interface Printer<T> {
        void put(String attribute, Object value);

        T flush();
    }
  learner_created: true
- name: src/blockchain/printers/OrderedMapPrinter.java
  visible: true
  text: |
    package blockchain.printers;

    import java.util.HashMap;
    import java.util.List;

    import static java.util.Arrays.asList;
    import static java.util.stream.Collectors.joining;

    public class OrderedPrinter implements Printer<String> {
        private static final List<String> order = asList(
                "Id", "Timestamp", "Magic number",
                "Hash of the previous block", "Hash of the block",
                "Block data"
        );

        private final HashMap<String, String> attributes = new HashMap<>();
        private final String header;
        private final String footer;

        public OrderedPrinter(String header, String footer) {
            this.header = header;
            this.footer = footer;
        }

        @Override
        public void put(String attribute, Object value) {
            attributes.put(attribute, value.toString());
        }

        @Override
        public String flush() {
            return order.stream()
                    .map(key -> key + ": " + attributes.getOrDefault(key, ""))
                    .collect(joining("\n", header + "\n", "\n" + footer + "\n"));
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/276/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/50/stages/276/implement">JetBrains
    Academy</a>
  time: Tue, 15 Sep 2020 21:11:19 UTC
record: -1
